{"ast":null,"code":"var _jsxFileName = \"/Users/ujkan/Desktop/uni/projects/tictactoe/java/src/main/resources/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to keep track of the current player (X or O)\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n\n  // State to keep track of the cells and their contents\n  const [grid, setGrid] = useState([['', '', ''], ['', '', ''], ['', '', '']]);\n\n  // Fetch the current game state from the API when the component mounts\n  useEffect(() => {\n    fetch('/board').then(response => response.json()).then(data => {\n      setGrid(data.grid);\n      setCurrentPlayer(data.currentPlayer);\n    });\n  }, []);\n\n  // Function to handle clicks on the grid cells\n  const handleCellClick = (row, col) => {\n    // Ignore the click if the cell is already filled\n    if (grid[row][col] !== '') {\n      return;\n    }\n\n    // Update the grid with the current player's symbol\n    const updatedGrid = [...grid];\n    updatedGrid[row][col] = currentPlayer;\n\n    // Check if the game is over\n    const gameOver = false;\n    let nextPlayer;\n    if (gameOver) {\n      // If the game is over, don't switch to the other player\n      nextPlayer = currentPlayer;\n    } else {\n      // Switch to the other player\n      nextPlayer = currentPlayer === 'X' ? 'O' : 'X';\n\n      // If the other player is the AI, make a move on behalf of the AI\n      if (nextPlayer === 'O') {\n        fetch('/ai').then(response => response.json()).then(aiMove => {\n          // Update the grid with the AI's move\n          const newGrid = [...updatedGrid];\n          newGrid[aiMove.row][aiMove.col] = 'O';\n\n          // Check if the game is over after the AI's move\n          const newGameOver = false;\n\n          // Update the state with the new grid and current player\n          setGrid(newGrid);\n          setCurrentPlayer(newGameOver ? 'O' : 'X');\n\n          // Send the updated game state to the API\n          fetch('../../src/api/game', {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              grid: newGrid,\n              currentPlayer: nextPlayer\n            })\n          });\n        });\n      }\n    }\n\n    // Update the state with the new grid and current player\n    setGrid(updatedGrid);\n    setCurrentPlayer(nextPlayer);\n\n    // Send the updated game state to the API\n    fetch('/api/game', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        grid: updatedGrid,\n        currentPlayer\n      })\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-row\",\n          children: row.map((col, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-cell\",\n            onClick: () => handleCellClick(rowIndex, colIndex),\n            children: col\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 19\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this);\n  };\n};\n_s(App, \"LLJ+BjM6OL98PM/Rd78KlhNZp/c=\");\n_c = App;\nexport default App;\n\n// Log to console\nconsole.log('Hello console');\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","App","currentPlayer","setCurrentPlayer","grid","setGrid","fetch","then","response","json","data","handleCellClick","row","col","updatedGrid","gameOver","nextPlayer","aiMove","newGrid","newGameOver","method","headers","body","JSON","stringify","map","rowIndex","colIndex","console","log"],"sources":["/Users/ujkan/Desktop/uni/projects/tictactoe/java/src/main/resources/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  // State to keep track of the current player (X or O)\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n\n  // State to keep track of the cells and their contents\n  const [grid, setGrid] = useState([\n    ['', '', ''],\n    ['', '', ''],\n    ['', '', ''],\n  ]);\n\n  // Fetch the current game state from the API when the component mounts\n  useEffect(() => {\n    fetch('/board')\n      .then(response => response.json())\n      .then(data => {\n        setGrid(data.grid);\n        setCurrentPlayer(data.currentPlayer);\n      });\n  }, []);\n\n  // Function to handle clicks on the grid cells\n  const handleCellClick = (row, col) => {\n    // Ignore the click if the cell is already filled\n    if (grid[row][col] !== '') {\n      return;\n    }\n\n    // Update the grid with the current player's symbol\n    const updatedGrid = [...grid];\n    updatedGrid[row][col] = currentPlayer;\n\n    // Check if the game is over\n    const gameOver = false;\n\n    let nextPlayer;\n    if (gameOver) {\n      // If the game is over, don't switch to the other player\n      nextPlayer = currentPlayer;\n    } else {\n      // Switch to the other player\n      nextPlayer = currentPlayer === 'X' ? 'O' : 'X';\n\n      // If the other player is the AI, make a move on behalf of the AI\n      if (nextPlayer === 'O') {\n        fetch('/ai')\n          .then(response => response.json())\n          .then(aiMove => {\n            // Update the grid with the AI's move\n            const newGrid = [...updatedGrid];\n            newGrid[aiMove.row][aiMove.col] = 'O';\n\n            // Check if the game is over after the AI's move\n            const newGameOver = false;\n\n            // Update the state with the new grid and current player\n            setGrid(newGrid);\n            setCurrentPlayer(newGameOver ? 'O' : 'X');\n\n            // Send the updated game state to the API\n            fetch('../../src/api/game', {\n              method: 'PUT',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ grid: newGrid, currentPlayer: nextPlayer }),\n            });\n          });\n      }\n    }\n\n    // Update the state with the new grid and current player\n    setGrid(updatedGrid);\n    setCurrentPlayer(nextPlayer);\n\n    // Send the updated game state to the API\n    fetch('/api/game', {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ grid: updatedGrid, currentPlayer\n\n      })\n    })\n    return (\n        <div>\n          <div className=\"grid\">\n            {grid.map((row, rowIndex) => (\n              <div key={rowIndex} className=\"grid-row\">\n                {row.map((col, colIndex) => (\n                  <div\n                    key={colIndex}\n                    className=\"grid-cell\"\n                    onClick={() => handleCellClick(rowIndex, colIndex)}\n                  >\n                    {col}\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n  }}\n\nexport default App;\n\n// Log to console\nconsole.log('Hello console')\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}