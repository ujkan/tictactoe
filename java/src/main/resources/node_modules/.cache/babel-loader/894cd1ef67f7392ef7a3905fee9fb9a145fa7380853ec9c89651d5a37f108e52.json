{"ast":null,"code":"import React, { useState, useEffect } from 'react';\n\n//const App = () => {\n//  // State to keep track of the current player (X or O)\n//  const [currentPlayer, setCurrentPlayer] = useState('X');\n//\n//  // State to keep track of the cells and their contents\n//  const [grid, setGrid] = useState([\n//    ['', '', ''],\n//    ['', '', ''],\n//    ['', '', ''],\n//  ]);\n//\n//  // Fetch the current game state from the API when the component mounts\n//  useEffect(() => {\n//    fetch('/board')\n//      .then(response => response.json())\n//      .then(data => {\n//        setGrid(data.grid);\n//        setCurrentPlayer(data.currentPlayer);\n//      });\n//  }, []);\n//\n//  // Function to handle clicks on the grid cells\n//  const handleCellClick = (row, col) => {\n//    // Ignore the click if the cell is already filled\n//    if (grid[row][col] !== '') {\n//      return;\n//    }\n//\n//    // Update the grid with the current player's symbol\n//    const updatedGrid = [...grid];\n//    updatedGrid[row][col] = currentPlayer;\n//\n//    // Check if the game is over\n//    const gameOver = false;\n//\n//    let nextPlayer;\n//    if (gameOver) {\n//      // If the game is over, don't switch to the other player\n//      nextPlayer = currentPlayer;\n//    } else {\n//      // Switch to the other player\n//      nextPlayer = currentPlayer === 'X' ? 'O' : 'X';\n//\n//      // If the other player is the AI, make a move on behalf of the AI\n//      if (nextPlayer === 'O') {\n//        fetch('/ai')\n//          .then(response => response.json())\n//          .then(aiMove => {\n//            // Update the grid with the AI's move\n//            const newGrid = [...updatedGrid];\n//            newGrid[aiMove.row][aiMove.col] = 'O';\n//\n//            // Check if the game is over after the AI's move\n//            const newGameOver = false;\n//\n//            // Update the state with the new grid and current player\n//            setGrid(newGrid);\n//            setCurrentPlayer(newGameOver ? 'O' : 'X');\n//\n//            // Send the updated game state to the API\n//            fetch('../../src/api/game', {\n//              method: 'PUT',\n//              headers: { 'Content-Type': 'application/json' },\n//              body: JSON.stringify({ grid: newGrid, currentPlayer: nextPlayer }),\n//            });\n//          });\n//      }\n//    }\n//\n//    // Update the state with the new grid and current player\n//    setGrid(updatedGrid);\n//    setCurrentPlayer(nextPlayer);\n//\n//    // Send the updated game state to the API\n//    fetch('/api/game', {\n//      method: 'PUT',\n//      headers: { 'Content-Type': 'application/json' },\n//      body: JSON.stringify({ grid: updatedGrid, currentPlayer\n//\n//      })\n//    });\n//    return (\n//        <div>\n//          <div className=\"grid\">\n//            {grid.map((row, rowIndex) => (\n//              <div key={rowIndex} className=\"grid-row\">\n//                {row.map((col, colIndex) => (\n//                  <div\n//                    key={colIndex}\n//                    className=\"grid-cell\"\n//                    onClick={() => handleCellClick(rowIndex, colIndex)}\n//                  >\n//                    {col}\n//                  </div>\n//                ))}\n//              </div>\n//            ))}\n//          </div>\n//        </div>\n//      );\n//  }}\n\nexport default App;\n\n// Log to console\nconsole.log('Hello console');","map":{"version":3,"names":["React","useState","useEffect","App","console","log"],"sources":["/Users/ujkan/Desktop/uni/projects/tictactoe/java/src/main/resources/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n//const App = () => {\n//  // State to keep track of the current player (X or O)\n//  const [currentPlayer, setCurrentPlayer] = useState('X');\n//\n//  // State to keep track of the cells and their contents\n//  const [grid, setGrid] = useState([\n//    ['', '', ''],\n//    ['', '', ''],\n//    ['', '', ''],\n//  ]);\n//\n//  // Fetch the current game state from the API when the component mounts\n//  useEffect(() => {\n//    fetch('/board')\n//      .then(response => response.json())\n//      .then(data => {\n//        setGrid(data.grid);\n//        setCurrentPlayer(data.currentPlayer);\n//      });\n//  }, []);\n//\n//  // Function to handle clicks on the grid cells\n//  const handleCellClick = (row, col) => {\n//    // Ignore the click if the cell is already filled\n//    if (grid[row][col] !== '') {\n//      return;\n//    }\n//\n//    // Update the grid with the current player's symbol\n//    const updatedGrid = [...grid];\n//    updatedGrid[row][col] = currentPlayer;\n//\n//    // Check if the game is over\n//    const gameOver = false;\n//\n//    let nextPlayer;\n//    if (gameOver) {\n//      // If the game is over, don't switch to the other player\n//      nextPlayer = currentPlayer;\n//    } else {\n//      // Switch to the other player\n//      nextPlayer = currentPlayer === 'X' ? 'O' : 'X';\n//\n//      // If the other player is the AI, make a move on behalf of the AI\n//      if (nextPlayer === 'O') {\n//        fetch('/ai')\n//          .then(response => response.json())\n//          .then(aiMove => {\n//            // Update the grid with the AI's move\n//            const newGrid = [...updatedGrid];\n//            newGrid[aiMove.row][aiMove.col] = 'O';\n//\n//            // Check if the game is over after the AI's move\n//            const newGameOver = false;\n//\n//            // Update the state with the new grid and current player\n//            setGrid(newGrid);\n//            setCurrentPlayer(newGameOver ? 'O' : 'X');\n//\n//            // Send the updated game state to the API\n//            fetch('../../src/api/game', {\n//              method: 'PUT',\n//              headers: { 'Content-Type': 'application/json' },\n//              body: JSON.stringify({ grid: newGrid, currentPlayer: nextPlayer }),\n//            });\n//          });\n//      }\n//    }\n//\n//    // Update the state with the new grid and current player\n//    setGrid(updatedGrid);\n//    setCurrentPlayer(nextPlayer);\n//\n//    // Send the updated game state to the API\n//    fetch('/api/game', {\n//      method: 'PUT',\n//      headers: { 'Content-Type': 'application/json' },\n//      body: JSON.stringify({ grid: updatedGrid, currentPlayer\n//\n//      })\n//    });\n//    return (\n//        <div>\n//          <div className=\"grid\">\n//            {grid.map((row, rowIndex) => (\n//              <div key={rowIndex} className=\"grid-row\">\n//                {row.map((col, colIndex) => (\n//                  <div\n//                    key={colIndex}\n//                    className=\"grid-cell\"\n//                    onClick={() => handleCellClick(rowIndex, colIndex)}\n//                  >\n//                    {col}\n//                  </div>\n//                ))}\n//              </div>\n//            ))}\n//          </div>\n//        </div>\n//      );\n//  }}\n\nexport default App;\n\n// Log to console\nconsole.log('Hello console')\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEleAAeC,GAAG;;AAElB;AACAC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}